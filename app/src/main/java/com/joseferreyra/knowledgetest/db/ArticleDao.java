package com.joseferreyra.knowledgetest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.joseferreyra.knowledgetest.communication.dto.Source;
import com.joseferreyra.knowledgetest.ui.ListInteraction;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ARTICLE".
 */
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Article_id = new Property(1, int.class, "article_id", false, "ARTICLE_ID");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property UrlToImage = new Property(6, String.class, "urlToImage", false, "URL_TO_IMAGE");
        public final static Property PublishedAt = new Property(7, String.class, "publishedAt", false, "PUBLISHED_AT");
        public final static Property SourceId = new Property(8, String.class, "sourceId", false, "SOURCE_ID");
        public final static Property SourceName = new Property(9, String.class, "sourceName", false, "SOURCE_NAME");
    }


    public ArticleDao(DaoConfig config) {
        super(config);
    }

    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ARTICLE_ID\" INTEGER NOT NULL ," + // 1: article_id
                "\"AUTHOR\" TEXT," + // 2: author
                "\"TITLE\" TEXT," + // 3: title
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"URL\" TEXT," + // 5: url
                "\"URL_TO_IMAGE\" TEXT," + // 6: urlToImage
                "\"PUBLISHED_AT\" TEXT," + // 7: publishedAt
                "\"SOURCE_ID\" TEXT," + // 8: sourceId
                "\"SOURCE_NAME\" TEXT);"); // 9: sourceName
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Article entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticle_id());

        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }

        String urlToImage = entity.getUrlToImage();
        if (urlToImage != null) {
            stmt.bindString(7, urlToImage);
        }

        String publishedAt = entity.getPublishedAt();
        if (publishedAt != null) {
            stmt.bindString(8, publishedAt);
        }

        String sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindString(9, sourceId);
        }

        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(10, sourceName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArticle_id());

        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }

        String urlToImage = entity.getUrlToImage();
        if (urlToImage != null) {
            stmt.bindString(7, urlToImage);
        }

        String publishedAt = entity.getPublishedAt();
        if (publishedAt != null) {
            stmt.bindString(8, publishedAt);
        }

        String sourceId = entity.getSourceId();
        if (sourceId != null) {
            stmt.bindString(9, sourceId);
        }

        String sourceName = entity.getSourceName();
        if (sourceName != null) {
            stmt.bindString(10, sourceName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getInt(offset + 1), // article_id
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // urlToImage
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // publishedAt
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sourceId
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // sourceName
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArticle_id(cursor.getInt(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrlToImage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublishedAt(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSourceId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSourceName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
    }

    @Override
    protected final Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Article entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Article entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    public void getAll(ListInteraction inter) {
        List<Article> articles = loadAll();
        List<com.joseferreyra.knowledgetest.communication.dto.Article> returnList = new ArrayList<com.joseferreyra.knowledgetest.communication.dto.Article>();
        for (Article article : articles) {
            returnList.add(new com.joseferreyra.knowledgetest.communication.dto.Article(
                    new Source(article.getSourceId(), article.getSourceName()),
                    article.getAuthor(),
                    article.getTitle(),
                    article.getDescription(),
                    article.getUrl(),
                    article.getUrlToImage(),
                    article.getPublishedAt()
            ));
        }
        inter.listUpdate(returnList);
    }

}
